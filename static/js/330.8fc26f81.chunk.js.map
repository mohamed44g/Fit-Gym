{"version":3,"file":"static/js/330.8fc26f81.chunk.js","mappings":"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","sources":["components/PriceCard/index.js","Pages/Price/index.js.js","components/Pagetitle/index.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./PriceCard.scss\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nexport default function Index(props) {\r\n  const { ref, inView } = useInView();\r\n  return (\r\n    <div className={`Prices-card ${inView ? `animate1` : null}`} ref={ref}>\r\n      <div className=\"Prices-card-title \">\r\n        <h4 className=\"fw-bold\">{props.name}</h4>\r\n        <h4>{props.price}$</h4>\r\n      </div>\r\n\r\n      <div className=\"Prices-card-features mt-5\">\r\n        {props.features.map((ele, index) => (\r\n          <p key={index} className=\"mt-2\">\r\n            {ele}\r\n          </p>\r\n        ))}\r\n      </div>\r\n\r\n      <div>\r\n        <button className=\"btn Prices-card-btn\">Join</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\nimport React from 'react';\nimport Pagetitle from '../../components/Pagetitle';\nimport PricesCard from '../../components/PriceCard';\nimport './Price.scss';\n\n\nconst pricingData = [\n  {\n    id: 0,\n    name: 'REGULAR',\n    price: '10',\n    features: [\n      'Bodybuilding',\n      '4 days per week',\n      'Free diet',\n      'No private coaches',\n      '3 hours maximum',\n      'No free supplements',\n    ],\n  },\n  {\n    id: 1,\n    name: 'PRO',\n    price: '20',\n    features: [\n      'Bodybuilding & cardio',\n      '5 days per week',\n      'Free diet',\n      'Private coaches',\n      '6 hours maximum',\n      'Free supplements',\n    ],\n  },\n  {\n    id: 2,\n    name: 'PLUS',\n    price: '30',\n    features: [\n      'Bodybuilding & cardio',\n      'Full week',\n      'Free diet',\n      'Private coaches',\n      'Unlimited time',\n      'Free supplements',\n    ],\n  },\n];\n\nexport default function Prices() {\n  return (\n    <div className=\"Prices container\">\n      <Pagetitle highlite=\"our prices\" title=\"PRICE FOR ALL\" />\n      <div className=\"Prices-cards d-flex justify-content-between flex-wrap\">\n        {pricingData.map((plan) => (\n          <PricesCard\n            key={plan.id}\n            name={plan.name}\n            price={plan.price}\n            features={plan.features}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","import React from \"react\";\r\nimport \"./Pagetitle.scss\";\r\nexport default function Index(props) {\r\n  return (\r\n    <div className=\"Page-title text-center\">\r\n      <div className=\"Page-title-highlite\">\r\n        <span>{props.highlite}</span>\r\n      </div>\r\n      <h2 className=\"fw-bold\">{props.title}</h2>\r\n    </div>\r\n  );\r\n}\r\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Index","props","_useInView","useInView","ref","inView","_jsxs","className","concat","children","_jsx","name","price","features","map","ele","index","pricingData","id","Prices","Pagetitle","highlite","title","plan","PricesCard","_defineProperty","obj","key","value","toPropertyKey","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectWithoutProperties","source","excluded","i","target","sourceKeys","length","indexOf","sourceSymbolKeys","prototype","propertyIsEnumerable","call","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","sort","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","instance","thresholds","elements","observer","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","splice","delete","unobserve","size","disconnect","React","_ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_React2$useState","React2","_React2$useState2","_slicedToArray","setRef","_React2$useState3","_React2$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}